# -*- coding: utf-8 -*-
# Generated by Django 1.9 on 2016-12-26 12:50
from __future__ import unicode_literals

import applications.mixins
import applications.utils.model_fields
import cloudinary.models
from decimal import Decimal
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Brand',
            fields=[
                ('created', models.DateTimeField(auto_now_add=True, null=True)),
                ('modified', models.DateTimeField(auto_now=True, null=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('brand_name', models.CharField(blank=True, default='', max_length=100, unique=True, verbose_name='Brand Name')),
                ('brand_description', models.TextField(blank=True, default='', verbose_name='Description')),
                ('brand_feature_image', cloudinary.models.CloudinaryField(blank=True, max_length=100, null=True, verbose_name='Featured Brand Image')),
                ('brand_website_url', models.URLField(blank=True, default='', max_length=100, verbose_name='Website')),
                ('brand_isActive', models.BooleanField(default=False, help_text='Check to activate brand', verbose_name='Brand Active')),
                ('menswear', models.BooleanField(default=False, help_text='Menswear', verbose_name='Men')),
                ('womenswear', models.BooleanField(default=False, help_text='Womenswear', verbose_name='Women')),
                ('slug', models.SlugField(blank=True, default='', max_length=255, verbose_name='Brand Slug')),
            ],
            options={
                'verbose_name': 'Brand',
                'verbose_name_plural': 'Brands',
            },
        ),
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, null=True)),
                ('modified', models.DateTimeField(auto_now=True, null=True)),
                ('name', models.CharField(blank=True, max_length=100, unique=True, verbose_name='Categories')),
                ('description', models.TextField(blank=True, default='', verbose_name='Description')),
            ],
            options={
                'verbose_name': 'Category',
                'verbose_name_plural': 'Categories',
            },
            bases=(applications.mixins.ValidateModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name='City',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, null=True)),
                ('modified', models.DateTimeField(auto_now=True, null=True)),
                ('city', models.CharField(blank=True, default='', max_length=200, unique=True, verbose_name='City')),
                ('latitude', models.DecimalField(blank=True, decimal_places=5, max_digits=8, null=True)),
                ('longitude', models.DecimalField(blank=True, decimal_places=5, max_digits=8, null=True)),
            ],
            options={
                'verbose_name': 'City',
                'verbose_name_plural': 'Cities',
            },
            bases=(applications.mixins.ValidateModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name='Location',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, null=True)),
                ('modified', models.DateTimeField(auto_now=True, null=True)),
                ('state_or_country', models.CharField(blank=True, default='', help_text='Enter your State (USA only) or Country (International only)', max_length=200, unique=True, verbose_name='Location')),
                ('location_choices', models.CharField(blank=True, choices=[('State', 'U.S.A'), ('Country', 'International')], max_length=100, verbose_name='U.S.A or International')),
            ],
            options={
                'verbose_name': 'Location',
                'verbose_name_plural': 'Locations',
            },
            bases=(applications.mixins.ValidateModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name='Product',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, null=True)),
                ('modified', models.DateTimeField(auto_now=True, null=True)),
                ('product_name', models.CharField(default='', max_length=100, verbose_name='Product Name')),
                ('product_url', models.URLField(default='', help_text='Enter the product url to the particular item on your website', max_length=100, verbose_name='Product Url')),
                ('product_price', applications.utils.model_fields.CurrencyField(decimal_places=2, default=Decimal('0.0'), max_digits=30, verbose_name='Product Price')),
                ('product_currency', models.CharField(blank=True, choices=[(b'USD', b'USD - United States Dollar'), (b'EUR', b'EUR - Euro Members'), (b'JPY', b'JPY - Japan Yen'), (b'GBP', b'GBP - United Kingdom Pound'), (b'CHF', b'CHF - Switzerland Franc'), (b'AED', b'AED - United Arab Emirates Dirham'), (b'AFN', b'AFN - Afghanistan Afghani'), (b'ALL', b'ALL - Albania Lek'), (b'AMD', b'AMD - Armenia Dram'), (b'ANG', b'ANG - Netherlands Antilles Guilder'), (b'AOA', b'AOA - Angola Kwanza'), (b'ARS', b'ARS - Argentina Peso'), (b'AUD', b'AUD - Australia Dollar'), (b'AWG', b'AWG - Aruba Guilder'), (b'AZN', b'AZN - Azerbaijan New Manat'), (b'BAM', b'BAM - Bosnia and Herzegovina Convertible Marka'), (b'BBD', b'BBD - Barbados Dollar'), (b'BDT', b'BDT - Bangladesh Taka'), (b'BGN', b'BGN - Bulgaria Lev'), (b'BHD', b'BHD - Bahrain Dinar'), (b'BIF', b'BIF - Burundi Franc'), (b'BMD', b'BMD - Bermuda Dollar'), (b'BND', b'BND - Brunei Darussalam Dollar'), (b'BOB', b'BOB - Bolivia Boliviano'), (b'BRL', b'BRL - Brazil Real'), (b'BSD', b'BSD - Bahamas Dollar'), (b'BTN', b'BTN - Bhutan Ngultrum'), (b'BWP', b'BWP - Botswana Pula'), (b'BYR', b'BYR - Belarus Ruble'), (b'BZD', b'BZD - Belize Dollar'), (b'CAD', b'CAD - Canada Dollar'), (b'CDF', b'CDF - Congo/Kinshasa Franc'), (b'CLP', b'CLP - Chile Peso'), (b'CNY', b'CNY - China Yuan Renminbi'), (b'COP', b'COP - Colombia Peso'), (b'CRC', b'CRC - Costa Rica Colon'), (b'CUC', b'CUC - Cuba Convertible Peso'), (b'CUP', b'CUP - Cuba Peso'), (b'CVE', b'CVE - Cape Verde Escudo'), (b'CZK', b'CZK - Czech Republic Koruna'), (b'DJF', b'DJF - Djibouti Franc'), (b'DKK', b'DKK - Denmark Krone'), (b'DOP', b'DOP - Dominican Republic Peso'), (b'DZD', b'DZD - Algeria Dinar'), (b'EGP', b'EGP - Egypt Pound'), (b'ERN', b'ERN - Eritrea Nakfa'), (b'ETB', b'ETB - Ethiopia Birr'), (b'FJD', b'FJD - Fiji Dollar'), (b'FKP', b'FKP - Falkland Islands (Malvinas) Pound'), (b'GEL', b'GEL - Georgia Lari'), (b'GGP', b'GGP - Guernsey Pound'), (b'GHS', b'GHS - Ghana Cedi'), (b'GIP', b'GIP - Gibraltar Pound'), (b'GMD', b'GMD - Gambia Dalasi'), (b'GNF', b'GNF - Guinea Franc'), (b'GTQ', b'GTQ - Guatemala Quetzal'), (b'GYD', b'GYD - Guyana Dollar'), (b'HKD', b'HKD - Hong Kong Dollar'), (b'HNL', b'HNL - Honduras Lempira'), (b'HRK', b'HRK - Croatia Kuna'), (b'HTG', b'HTG - Haiti Gourde'), (b'HUF', b'HUF - Hungary Forint'), (b'IDR', b'IDR - Indonesia Rupiah'), (b'ILS', b'ILS - Israel Shekel'), (b'IMP', b'IMP - Isle of Man Pound'), (b'INR', b'INR - India Rupee'), (b'IQD', b'IQD - Iraq Dinar'), (b'IRR', b'IRR - Iran Rial'), (b'ISK', b'ISK - Iceland Krona'), (b'JEP', b'JEP - Jersey Pound'), (b'JMD', b'JMD - Jamaica Dollar'), (b'JOD', b'JOD - Jordan Dinar'), (b'KES', b'KES - Kenya Shilling'), (b'KGS', b'KGS - Kyrgyzstan Som'), (b'KHR', b'KHR - Cambodia Riel'), (b'KMF', b'KMF - Comoros Franc'), (b'KPW', b'KPW - Korea (North) Won'), (b'KRW', b'KRW - Korea (South) Won'), (b'KWD', b'KWD - Kuwait Dinar'), (b'KYD', b'KYD - Cayman Islands Dollar'), (b'KZT', b'KZT - Kazakhstan Tenge'), (b'LAK', b'LAK - Laos Kip'), (b'LBP', b'LBP - Lebanon Pound'), (b'LKR', b'LKR - Sri Lanka Rupee'), (b'LRD', b'LRD - Liberia Dollar'), (b'LSL', b'LSL - Lesotho Loti'), (b'LTL', b'LTL - Lithuania Litas'), (b'LVL', b'LVL - Latvia Lat'), (b'LYD', b'LYD - Libya Dinar'), (b'MAD', b'MAD - Morocco Dirham'), (b'MDL', b'MDL - Moldova Le'), (b'MGA', b'MGA - Madagascar Ariary'), (b'MKD', b'MKD - Macedonia Denar'), (b'MMK', b'MMK - Myanmar (Burma) Kyat'), (b'MNT', b'MNT - Mongolia Tughrik'), (b'MOP', b'MOP - Macau Pataca'), (b'MRO', b'MRO - Mauritania Ouguiya'), (b'MUR', b'MUR - Mauritius Rupee'), (b'MVR', b'MVR - Maldives (Maldive Islands) Rufiyaa'), (b'MWK', b'MWK - Malawi Kwacha'), (b'MXN', b'MXN - Mexico Peso'), (b'MYR', b'MYR - Malaysia Ringgit'), (b'MZN', b'MZN - Mozambique Metical'), (b'NAD', b'NAD - Namibia Dollar'), (b'NGN', b'NGN - Nigeria Naira'), (b'NIO', b'NIO - Nicaragua Cordoba'), (b'NOK', b'NOK - Norway Krone'), (b'NPR', b'NPR - Nepal Rupee'), (b'NZD', b'NZD - New Zealand Dollar'), (b'OMR', b'OMR - Oman Rial'), (b'PAB', b'PAB - Panama Balboa'), (b'PEN', b'PEN - Peru Nuevo Sol'), (b'PGK', b'PGK - Papua New Guinea Kina'), (b'PHP', b'PHP - Philippines Peso'), (b'PKR', b'PKR - Pakistan Rupee'), (b'PLN', b'PLN - Poland Zloty'), (b'PYG', b'PYG - Paraguay Guarani'), (b'QAR', b'QAR - Qatar Riyal'), (b'RON', b'RON - Romania New Le'), (b'RSD', b'RSD - Serbia Dinar'), (b'RUB', b'RUB - Russia Ruble'), (b'RWF', b'RWF - Rwanda Franc'), (b'SAR', b'SAR - Saudi Arabia Riyal'), (b'SBD', b'SBD - Solomon Islands Dollar'), (b'SCR', b'SCR - Seychelles Rupee'), (b'SDG', b'SDG - Sudan Pound'), (b'SEK', b'SEK - Sweden Krona'), (b'SGD', b'SGD - Singapore Dollar'), (b'SHP', b'SHP - Saint Helena Pound'), (b'SLL', b'SLL - Sierra Leone Leone'), (b'SOS', b'SOS - Somalia Shilling'), (b'SPL', b'SPL - Seborga Luigino'), (b'SRD', b'SRD - Suriname Dollar'), (b'STD', b'STD - S\xc3\xa3o Tom\xc3\xa9 and Pr\xc3\xadncipe Dobra'), (b'SVC', b'SVC - El Salvador Colon'), (b'SYP', b'SYP - Syria Pound'), (b'SZL', b'SZL - Swaziland Lilangeni'), (b'THB', b'THB - Thailand Baht'), (b'TJS', b'TJS - Tajikistan Somoni'), (b'TMT', b'TMT - Turkmenistan Manat'), (b'TND', b'TND - Tunisia Dinar'), (b'TOP', b"TOP - Tonga Pa'anga"), (b'TRY', b'TRY - Turkey Lira'), (b'TTD', b'TTD - Trinidad and Tobago Dollar'), (b'TVD', b'TVD - Tuvalu Dollar'), (b'TWD', b'TWD - Taiwan New Dollar'), (b'TZS', b'TZS - Tanzania Shilling'), (b'UAH', b'UAH - Ukraine Hryvna'), (b'UGX', b'UGX - Uganda Shilling'), (b'UYU', b'UYU - Uruguay Peso'), (b'UZS', b'UZS - Uzbekistan Som'), (b'VEF', b'VEF - Venezuela Bolivar'), (b'VND', b'VND - Viet Nam Dong'), (b'VUV', b'VUV - Vanuatu Vat'), (b'WST', b'WST - Samoa Tala'), (b'XAF', b'XAF - Communaut\xc3\xa9 Financi\xc3\xa8re Africaine (BEAC) CFA Franc BEAC'), (b'XCD', b'XCD - East Caribbean Dollar'), (b'XDR', b'XDR - International Monetary Fund (IMF) Special Drawing Rights'), (b'XOF', b'XOF - Communaut\xc3\xa9 Financi\xc3\xa8re Africaine (BCEAO) Franc'), (b'XPF', b'XPF - Comptoirs Fran\xc3\xa7ais du Pacifique (CFP) Franc'), (b'YER', b'YER - Yemen Rial'), (b'ZAR', b'ZAR - South Africa Rand'), (b'ZMK', b'ZMK - Zambia Kwacha'), (b'ZWD', b'ZWD - Zimbabwe Dollar')], default='USD', max_length=100, verbose_name='Currency')),
                ('product_image', cloudinary.models.CloudinaryField(max_length=100, null=True, verbose_name='Product Image')),
                ('product_isActive', models.BooleanField(default=False, help_text='Check to display your product on the app, uncheck to undisplay your product on the app', verbose_name='Product Active')),
                ('product_isMale', models.BooleanField(default=False, help_text='Check to denote this product is for men. This is \n            an advance option and only meant if your label sells men & women products', verbose_name='Product isMale')),
                ('product_isFemale', models.BooleanField(default=False, help_text='Check to denote this product is for women. This is \n            an advance option and only meant if your label sells men & women products', verbose_name='Product isFemale')),
                ('product_isUnisex', models.BooleanField(default=False, help_text='Check to denote this product is for men & women. This is \n            an advance option and only meant if your label sells men & women products', verbose_name='Product isUnisex')),
                ('brand', models.ForeignKey(help_text='Select Your Brand', null=True, on_delete=django.db.models.deletion.CASCADE, to='applications.Brand', verbose_name='Label Name')),
            ],
            options={
                'verbose_name': 'Product',
                'verbose_name_plural': 'Products',
            },
        ),
        migrations.CreateModel(
            name='Style',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, null=True)),
                ('modified', models.DateTimeField(auto_now=True, null=True)),
                ('name', models.CharField(blank=True, max_length=100, unique=True, verbose_name='Style')),
                ('description', models.TextField(blank=True, default='', verbose_name='Description')),
            ],
            options={
                'verbose_name': 'Style',
                'verbose_name_plural': 'Styles',
            },
            bases=(applications.mixins.ValidateModelMixin, models.Model),
        ),
        migrations.AddField(
            model_name='city',
            name='location',
            field=models.ForeignKey(blank=True, help_text='Select your State or Country', null=True, on_delete=django.db.models.deletion.CASCADE, to='applications.Location', verbose_name='Location'),
        ),
        migrations.AddField(
            model_name='brand',
            name='brand_category',
            field=models.ManyToManyField(blank=True, to='applications.Category', verbose_name='Category'),
        ),
        migrations.AddField(
            model_name='brand',
            name='brand_city',
            field=models.ForeignKey(blank=True, default='', null=True, on_delete=django.db.models.deletion.CASCADE, to='applications.City'),
        ),
        migrations.AddField(
            model_name='brand',
            name='brand_style',
            field=models.ManyToManyField(blank=True, to='applications.Style', verbose_name='Style'),
        ),
    ]
