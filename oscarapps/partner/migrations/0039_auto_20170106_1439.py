# -*- coding: utf-8 -*-
# Generated by Django 1.9 on 2017-01-06 14:39
from __future__ import unicode_literals

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import oscar.models.fields


class Migration(migrations.Migration):

    dependencies = [
        ('address', '0003_auto_20170106_0552'),
        ('partner', '0038_auto_20170106_0552'),
    ]

    operations = [
        migrations.CreateModel(
            name='AvailableDateTime',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField()),
                ('from_time', models.TimeField()),
                ('to_time', models.TimeField()),
            ],
            options={
                'verbose_name': 'Available Date And Time',
            },
        ),
        migrations.CreateModel(
            name='BrandCategories',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('categories', models.CharField(blank=True, max_length=100, unique=True, verbose_name='Categories')),
                ('description', models.TextField(blank=True, default='', verbose_name='Description')),
            ],
            options={
                'verbose_name': 'Style',
                'verbose_name_plural': 'Styles',
            },
        ),
        migrations.CreateModel(
            name='BrandStoreType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('store_type', models.CharField(blank=True, max_length=100, unique=True, verbose_name='Store Type')),
            ],
            options={
                'verbose_name': 'Store Type',
                'verbose_name_plural': 'Store Types',
            },
        ),
        migrations.CreateModel(
            name='RentalInformation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(blank=True, choices=[('Mr', 'Mr'), ('Miss', 'Miss'), ('Mrs', 'Mrs'), ('Ms', 'Ms'), ('Dr', 'Dr')], max_length=64, verbose_name='Title')),
                ('first_name', models.CharField(blank=True, max_length=255, verbose_name='First name')),
                ('last_name', models.CharField(blank=True, max_length=255, verbose_name='Last name')),
                ('line1', models.CharField(max_length=255, verbose_name='First line of address')),
                ('line2', models.CharField(blank=True, max_length=255, verbose_name='Second line of address')),
                ('line3', models.CharField(blank=True, max_length=255, verbose_name='Third line of address')),
                ('line4', models.CharField(blank=True, max_length=255, verbose_name='City')),
                ('state', models.CharField(blank=True, max_length=255, verbose_name='State/County')),
                ('postcode', oscar.models.fields.UppercaseCharField(blank=True, max_length=64, verbose_name='Post/Zip-code')),
                ('search_text', models.TextField(editable=False, verbose_name='Search text - used only for searching addresses')),
                ('post_box', models.CharField(blank=True, default='', max_length=20, verbose_name='Apartment/P.O.Box')),
                ('contact_number', models.CharField(blank=True, max_length=20, validators=[django.core.validators.RegexValidator(message="Phone number must be entered in the format: '+999999999'. Up to 15 digits are allowed.", regex='^\\+?1?\\d{9,15}$')])),
                ('availability', models.ForeignKey(blank=True, default='', null=True, on_delete=django.db.models.deletion.CASCADE, to='partner.AvailableDateTime', verbose_name='Availability')),
                ('country', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='address.Country', verbose_name='Country')),
            ],
            options={
                'verbose_name': 'Rental Information',
                'verbose_name_plural': 'Rental Informations',
            },
        ),
        migrations.RenameField(
            model_name='partner',
            old_name='brand_style',
            new_name='style_preferences',
        ),
        migrations.RemoveField(
            model_name='partner',
            name='brand_description',
        ),
        migrations.RemoveField(
            model_name='partner',
            name='brand_feature_image',
        ),
        migrations.RemoveField(
            model_name='partner',
            name='brand_isActive',
        ),
        migrations.RemoveField(
            model_name='partner',
            name='brand_website_url',
        ),
        migrations.RemoveField(
            model_name='partner',
            name='category',
        ),
        migrations.AddField(
            model_name='partner',
            name='description',
            field=models.TextField(blank=True, default='', verbose_name='Brand Description'),
        ),
        migrations.AddField(
            model_name='partner',
            name='image',
            field=models.ImageField(blank=True, max_length=255, null=True, upload_to='Brands', verbose_name='Image'),
        ),
        migrations.AddField(
            model_name='partner',
            name='isActive',
            field=models.BooleanField(default=True, help_text='Check|Un-Check to activate store', verbose_name='Store Active'),
        ),
        migrations.AddField(
            model_name='partner',
            name='location',
            field=models.ForeignKey(blank=True, default='', null=True, on_delete=django.db.models.deletion.CASCADE, to='address.Locations', verbose_name='Location'),
        ),
        migrations.AddField(
            model_name='brandcategories',
            name='type',
            field=models.ManyToManyField(blank=True, to='partner.BrandStoreType', verbose_name='Brand Store Type'),
        ),
        migrations.AddField(
            model_name='partner',
            name='rental_info',
            field=models.ManyToManyField(blank=True, to='partner.RentalInformation', verbose_name='Rental Information'),
        ),
        migrations.AddField(
            model_name='partner',
            name='store_categories',
            field=models.ManyToManyField(blank=True, to='partner.BrandCategories', verbose_name='Store Categories'),
        ),
        migrations.AddField(
            model_name='partner',
            name='store_type',
            field=models.ManyToManyField(blank=True, to='partner.BrandStoreType', verbose_name='Store Type'),
        ),
    ]
